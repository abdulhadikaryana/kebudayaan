<?php/* * * ApiController * Berisi fungsi-fungsi untuk mengenerate content untuk mobile * @package : Api Indonesia.travel 2011 * @author : Tajhul Faijin * */class ApiController extends Budpar_Controller_Common {    private $_limit;    public function init() {        parent::init();        $this->_limit = 10;    }    public function indexAction() {        parent::disableView();        echo 'OK';    }    /*     *     * Fungsi API untuk menggenerate data event untuk mobil indonesia.travel     * @param : (int)page number     * @param : (string)sortby (name)     * @param : (string)sortorder (asc / desc)     * Full url : http://id.indonesia.travel/en/api/event/intvtime/month/intvvalue/3/rule/3/sortby/start/sortorder/desc     * return Json Object     * */    public function eventAction() {        parent::disableView();        //set paramter page        $page = $this->_getParam('page');        if ($this->_request->isPost() OR ! isset($page)) {            $page = 1;        }        //set parameter sorting available (start/name)        $sortby = $this->_getParam('sortby');        if ($this->_request->isPost() OR ! isset($sortby)) {            $sortby = 'start';        }        //set parameter index sorting ASC/DESC        $sortOrder = $this->_getParam('sortorder');        if ($this->_request->isPost() OR ! isset($sortOrder)) {            $sortOrder = 'ASC';        }        //set parameter pagination        $limit = $this->_limit;        $offset = ($page - 1) * $limit;        //set parameter interval available (day / week / month / year)        $intervalTime = $this->_getParam('intvtime');        if (!isset($intervalTime)) {            $intervalTime = 'month'; //default month        }        //set parameter interval available (day / week / month / year)        $intervalValue = $this->_getParam('intvvalue');        if (!isset($intervalValue)) {            $intervalValue = 6; //default 6        }        //set parameter rule (1 = before & after / 2 = just before / 3 = just after )        //e.x : 1 = berarti generate data antara 6 bulan kebelakang dan 6 bulan kedepan dari sekarang        $rule = $this->_getParam('rule');        if (!isset($rule)) {            $rule = 1; //default before & after        }        //all parameter        $param = array('limit' => $limit, //int            'offset' => $offset, //int            'paging' => false, //bool            'sortby' => $sortby, //string            'sortorder' => $sortOrder, //string            'languageId' => $this->_languageId,            'intervalType' => $intervalTime, //string (day / week / month / year)            'intervalValue' => $intervalValue, //int            'rule' => $rule //int        );        $model = new Model_DbTable_Event();        $query = $model->api_getAllWithoutDesc($param);        $jsonData = array();        $feedparam = array();        $feedparam['page'] = $page;        $feedparam['sortby'] = $sortby;        $feedparam['sortOrder'] = $sortOrder;        if (sizeof($query)) {            foreach ($query as $key => $value) {                $jsonData[$key]['self']['event_id'] = $value['event_id'];                $jsonData[$key]['self']['time_created'] = $value['time_created'];                $jsonData[$key]['self']['date_start'] = $value['date_start'];                $jsonData[$key]['self']['date_end'] = $value['date_end'];                $jsonData[$key]['self']['viewer'] = $value['viewer'];                $jsonData[$key]['desc']['language_id'] = $value['language_id'];                $jsonData[$key]['desc']['name'] = str_replace('\\', '', $this->removeChar($value['name']));                $jsonData[$key]['desc']['description'] = self::removeChar($value['description']);                //$jsonData[$key]['desc']['description'] = str_replace('\\',' ',$this->removeChar($value['description']));            }        }        $parent = array();        $parent['HEAD'] = $jsonData;        echo json_encode($parent);    }    protected function removeChar($string) {        $string = html_entity_decode($string);        $pure = preg_replace("/(^[\r\n]*|[\r\n]+)[\s\t]*[\r\n]+/", "", $string);        $pure = str_replace("</p>", "\gb", $pure);        return strip_tags(strip_tags($pure));    }    /*     * Fungsi untuk menkompres data dengan metode gzcompress     * @param : (string)full path file     * @param : (string / array) data     * @param : (int) level compressed (1 - 9)     * return void     * */    protected function writeGZ($path = '', $data = '', $level = 5) {        if ($path != '') {            $fp = fopen($path, 'w');            fwrite($fp, gzcompress($data, $level));            fclose($fp);        }    }    protected function writeFile($path = '', $data = '') {        if ($path != '') {            $fp = fopen($path, 'w');            fwrite($fp, $data);            fclose($fp);        }    }    /*     * Fungsi untuk membaca isi file gz     * @param : (string)full path file     * return string / array     * */    protected function readGZ($path = '') {        if ($path != '') {            ob_start();            $data = file_get_contents($path);            $uncompressed = gzuncompress(trim($data));            ob_end_flush();            return $uncompressed;        }    }    /**     *  get event humanDate json data used by eventCalendar     *       *  @return json     */    public function eventdataAction() {        // only accept ajax request        if ($this->getRequest()->isXmlHttpRequest() || true) {            // disable layout and render            $this->_helper->layout()->disableLayout();            $this->_helper->viewRenderer->setNoRender(true);            // set response content-type to json            $this->_response->setHeader("content-type", "application/json");            // for view helpers            $view = $this->view;            // create instance of event model            $model = new Model_DbTable_Event();            // get all events from database            $events = $model->getAllWithDesc();            // initialize empty array for result data            $data = array();            // loop through events object            foreach ($events as $index => $event) {                $month = "";                // convert mysql datetime to date only                $start = date('d F Y', strtotime($event->date_start));                $end = date('d F Y', strtotime($event->date_end));                // get start time                $start_time = date('H:i:s', strtotime($event->date_start));                $description = $this->view->truncate($event->description, 100);                $txt_mulai = $this->_languageId == 1 ? "Mulai" : "Start";                $txt_selesai = $this->_languageId == 1 ? "Selesai" : "End";                $html = <<<HTML                        {$txt_mulai} <strong>{$start}</strong>                         &nbsp;&middot;&nbsp                        {$txt_selesai} <strong>{$end}</strong> <br/>HTML;                $data[] = array(                    "date" => date('Y-m-d h:i:s', strtotime($event->date_start)),                    "title" => $event->name,                    "description" => $html,                    "url" => $view->url(array(                        'id' => $event['event_id'],                        'slug' => $view->makeUrlFormat($event['name'])                            ), ($this->_languageId == 1 ? 'detail-kegiatan' : 'event-detail'))                );            }            // return json result to client            echo json_encode($data);        }    }    public function pingomaticAction() {        $debug = true;        $this->_helper->layout()->disableLayout();        $this->_helper->viewRenderer->setNoRender();        $articleDB = new Model_DbTable_Destination();        $articles = $articleDB->findAllWithDescription($this->_languageId);        $content = '<?xml version="1.0"?>';        $content .= '<methodCall>';        $content .= '<methodName>weblogUpdates.ping</methodName>';        $content .= '<params>';        foreach ($articles as $article) {            $content .= '<param>';            $content .= '<value>' . $article->name . '</value>';            $content .= '</param>';            $content .= '<param>';            $content .= '<value>' . 'http://www.kebudayaanindonesia.net/id/culture/' . $article->poi_id . '/' . $this->view->makeUrlFormat($article->name) . '</value>';            $content .= '</param>';        }        $content .= ' </params>';        $content .= '</methodCall>';        $headers = "POST / HTTP/1.0\r\n" .                "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.1) Gecko/20090624 Firefox/3.5 (.NET CLR 3.5.30729)\r\n" .                "Host: rpc.pingomatic.com\r\n" .                "Content-Type: text/xml\r\n" .                "Content-length: " . strlen($content);        if ($debug)            nl2br($headers);        $request = $headers . "\r\n\r\n" . $content;        $response = "";        $fs = fsockopen('rpc.pingomatic.com', 80, $errno, $errstr);        if ($fs) {            fwrite($fs, $request);            while (!feof($fs))                $response .= fgets($fs);            if ($debug)                echo "<xmp>" . $response . "</xmp>";            fclose($fs);            preg_match_all("/<(name|value|boolean|string)>(.*)<\/(name|value|boolean|string)>/U", $response, $ar, PREG_PATTERN_ORDER);            for ($i = 0; $i < count($ar[2]); $i++)                $ar[2][$i] = strip_tags($ar[2][$i]);            return array('status' => ($ar[2][1] == 1 ? 'ko' : 'ok'), 'msg' => $ar[2][3]);        } else {            if ($debug)                echo "<xmp>" . $errstr . " (" . $errno . ")</xmp>";            return array('status' => 'ko', 'msg' => $errstr . " (" . $errno . ")");        }    }}?>