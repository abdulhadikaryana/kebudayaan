<?php/** * AccountController * * Controller untuk melakukan fungsi2 yang berkaitan dengan * admin - account */require_once 'Zend/Controller/Action.php';class Admin_AccountController extends Library_Controller_Backend {    /**     * IS: -     * FS: -     * Desc: Inisiasi fungsi parent     */    protected $filter;    protected $form;    protected $account;    public function init() {        $this->account = new Model_DbTable_AdminAccount();        $this->filter = new Zend_Session_Namespace('filter');        $this->form = new Admin_Form_AccountForm();        parent::init();    }    public function indexAction() {        $pageNumber = $this->_getParam('page');        $table_role = new Model_DbTable_AdminRole;        $message = $this->_flash->getMessages();        $this->view->cleanurl = $this->_cleanUrl;        $new_search = FALSE;        if ($this->getRequest()->isPost()) {            $post = $this->getRequest()->getPost();            switch ($post['action']) {                case 'delete':                    $count = 0;                    foreach ($post['account'] as $id) {                        $account = $this->account->find($id)->current();                        $account->delete();                        $count++;                    }                    if ($count) {                        $this->_helper->flashMessenger                                ->setNamespace('success')                                ->addMessage("{$count} akun berhasil dihapus.");                    } else {                        $this->_helper->flashMessenger                                ->setNamespace('error')                                ->addMessage("Tidak ada akun terpilih.");                    }                    $this->_redirector->gotoSimple("index");                    break;                case 'filter':                    $this->filter->account = $post['filter'];                    break;                case 'sort':                    $this->filter->account = $post['filter'];                    if ($this->filter->account['order'] == 'ASC')                        $this->filter->account['order'] = 'DESC';                    else                        $this->filter->account['order'] = 'ASC';                    break;                case 'reset':                    $this->filter->unsetAll();                    break;                default:                    break;            }        }        $accounts = $this->account->getAllQuery($this->filter->account);        $paginator = Zend_Paginator::factory($accounts);        $paginator->setCurrentPageNumber($pageNumber);        $paginator->setItemCountPerPage(5);        if (isset($this->filter->account['row'])) {            $paginator->setItemCountPerPage($this->filter->account['row']);        }        $messages = $this->_helper->flashMessenger->getMessages();        $this->view->messages = $messages;        $this->view->filter = $this->filter->account;        $this->view->paginator = $paginator;        $this->view->title = "Akun Admin";    }    /**     * IS: -     * FS: Mengirimkan ke viewer: form     * Desc: Mengatur aksi yang dilakukan untuk halaman create     */    public function createAction() {        $form = new Admin_Form_AccountForm;        $form->setRoleOption();        $table_adminAccount = new Model_DbTable_AdminAccount;        if ($this->getRequest()->isPost()) {            if ($form->isValid($_POST)) {                $data = array(                    'username' => $_POST['adminUser'],                    'password' => md5($_POST['adminPassword']),                    'email' => $_POST['adminEmail'],                    'role_id' => $_POST['adminRole'],                );                $account_id = $table_adminAccount->insertAccount($data);                $this->loggingaction('account', 'create', $account_id);                $this->_flashMessenger                        ->setNamespace('success')                        ->addMessage(array("Akun admin berhasil ditambahkan"));            } else {                $this->_helper->flashMessenger                        ->setNamespace('error')                        ->addMessage('Gagal menambahkan akun admin');            }            $this->_redirector->gotoSimpleAndExit("index");        }        $this->view->form = $form;    }    /**     * IS: Parameter id terdeklarasi     * FS: Mengirimkan ke viewer: form     * Desc: Mengatur aksi yang dilakukan untuk halaman edit     */    public function editAction() {        $form = new Admin_Form_AccountForm;        $form->setRoleOption();        $admin_id = $this->_getParam('id');        $acc = new Model_DbTable_AdminAccount();        $data = $acc->getAllQueryById($admin_id);        if ($this->getRequest()->isPost()) {            if ($form->isValid($_POST)) {                $data = array(                    'username' => $_POST['adminUser'],                    'password' => md5($_POST['adminPassword']),                    'email' => $_POST['adminEmail'],                    'role_id' => $_POST['adminRole'],                );                $acc->updateAccount($data, $admin_id);                $this->loggingaction('account', 'edit', $admin_id);                $this->_helper->flashMessenger                        ->setNamespace("success")                        ->addMessage("Akun admin berhasil diubah");            } else {                $this->_helper->flashMessenger                        ->setNamespace("error")                        ->addMessage("Akun admin gagal diubah.");            }            $this->_redirector->gotoSimple("index");        }        $form->adminRole->setValue($data['role_id']);        $form->adminUser->setValue($data['username']);        $form->adminEmail->setValue($data['email']);        $this->view->form = $form;    }    public function deleteAction() {        $this->_helper->viewRenderer->setNoRender();        $id = $this->_getParam('id');        if (null !== $id) {            $account = $this->account->find($id)->current();            if (null != $account) {                $account->delete();                $this->loggingaction('Account', 'Delete', null, null);                $this->_helper->flashMessenger->addMessage                        ('Akun berhasil dihapus');            }        }        $this->_helper->redirector('index');    }}