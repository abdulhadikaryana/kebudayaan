<?php/** * ContactController * * Controller untuk melakukan fungsi2 yang berkaitan dengan * admin - contact */require_once 'Zend/Controller/Action.php';class Admin_ContactController extends Library_Controller_Backend {    protected $contact;    protected $_contactSubject;    protected $filter;    protected $form;    /**     * IS: -     * FS: -     * Desc: Inisiasi fungsi parent     */    public function init() {        $this->contact = new Model_DbTable_Contact();        $this->_contactSubject = new Model_DbTable_ContactSubject();        $this->form = new Admin_Form_ContactForm();        $this->filter = new Zend_Session_Namespace('filter');        parent::init();    }    /**     * IS: Terdeklarasinya filter dan param di session, dan page_row     * FS: Mengirimkan ke viewer: cleanUrl, message, page_row, filter_alert,      *     paginator, countId     * Desc: Mengatur aksi yang dilakukan untuk halaman index     */    public function indexAction() {        /** Get messages from CRUD process */        $pageNumber = $this->_getParam('page');        $message = $this->_flash->getMessages();        if (!empty($message)) {            $this->view->message = $message;        }        if ($this->getRequest()->isPost()) {            $post = $this->getRequest()->getPost();            switch ($post['action']) {                case 'delete':                    if (isset($post['contact'])) {                        $contact = $post['contact'];                        foreach ($contact as $id) {                            $this->contact->find($id)->current()->delete();                        }                        $this->_helper->flashMessenger->addMessage                                ('Kontak berhasil dihapus.');                    }                    break;                case 'filter':                    $this->filter->contact = $post['filter'];                    break;                case 'sort' :                    $this->filter->contact = $post['filter'];                    if ($this->filter->contact['order'] == 'ASC')                        $this->filter->contact['order'] = 'DESC';                    else                        $this->filter->contact['order'] = 'ASC';                    break;                case 'reset':                    $this->filter->unsetAll();                    break;                default:                    break;            }        }        $new_search = FALSE;        $param = null;        $select = $this->contact->getAllQuery($this->filter->contact, $param);        $data = $this->contact->fetchAll($select);        $param = $this->_paginator_sess->param;        $filter = $this->_paginator_sess->filter;        $contact = Zend_Paginator::factory($data);        $contact->setCurrentPageNumber($pageNumber);        $contact->setItemCountPerPage(5);        if (null != $this->filter->contact['row'])            $contact->setItemCountPerPage($this->filter->contact['row']);        $this->view->filter = $this->filter->contact;        $this->view->contact = $contact;        $page_row = $this->_getParam('filterPageRow');        $this->view->row = $page_row;        if ($page_row != null) {            $paginator = parent::setPaginator($select, $page_row);        } else {            $paginator = parent::setPaginator($select);        }        //if this is a new search then return the page number back to the 1st page        if ($new_search) {            $paginator->setCurrentPageNumber(1);        }        $this->view->paginator = $paginator;//        $this->view->countId = $countId;        //country select        Zend_Registry::set('languageId', 1);        $this->view->totalItem = $paginator->getTotalItemCount();    }    public function detailAction() {        $form = new Admin_Form_ContactForm;        $db = new Model_DbTable_Contact();        $contactId = $this->_getParam('id');        $contact = $db->find($contactId)->current();        $contact->setFromArray(array('flag' => true))->save();        $this->view->contact = $contact;    }}